
Robotic Arm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00000624  000006b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000624  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  00800200  00800200  000006b8  2**0
                  ALLOC
  3 .stab         000008b8  00000000  00000000  000006b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000144  00000000  00000000  00000f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  000010b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000821  00000000  00000000  00001138  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000205  00000000  00000000  00001959  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000040f  00000000  00000000  00001b5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e4  00000000  00000000  00001f70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000232  00000000  00000000  00002154  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000392  00000000  00000000  00002386  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
   8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
   c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  44:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__vector_17>
  48:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__vector_18>
  4c:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__vector_19>
  50:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__vector_20>
  54:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  58:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  5c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  60:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  64:	0c 94 39 02 	jmp	0x472	; 0x472 <__vector_25>
  68:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  6c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  70:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  74:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  7c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  80:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  84:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  88:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  8c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  90:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  94:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  98:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  9c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  a8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  ac:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  b8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  bc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  c8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  cc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  d8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  dc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  e0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	12 e0       	ldi	r17, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	e4 e2       	ldi	r30, 0x24	; 36
  f8:	f6 e0       	ldi	r31, 0x06	; 6
  fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
  fc:	05 90       	lpm	r0, Z+
  fe:	0d 92       	st	X+, r0
 100:	a0 30       	cpi	r26, 0x00	; 0
 102:	b1 07       	cpc	r27, r17
 104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>

00000106 <__do_clear_bss>:
 106:	12 e0       	ldi	r17, 0x02	; 2
 108:	a0 e0       	ldi	r26, 0x00	; 0
 10a:	b2 e0       	ldi	r27, 0x02	; 2
 10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
 10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
 110:	a9 31       	cpi	r26, 0x19	; 25
 112:	b1 07       	cpc	r27, r17
 114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
 116:	0e 94 b9 02 	call	0x572	; 0x572 <main>
 11a:	0c 94 10 03 	jmp	0x620	; 0x620 <_exit>

0000011e <__bad_interrupt>:
 11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <servo_init>:
unsigned int servo_value1,servo_value2,servo_value3,servo_value4,servo_value5,servo_value6,servo_value7;
unsigned char set = 0;

void servo_init(void)//Initialize servo
{
	DDRJ  = 0xFF;//Data direction = input
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	80 93 04 01 	sts	0x0104, r24
	PORTJ = 0;
 128:	10 92 05 01 	sts	0x0105, r1
	TCCR1A = 0;//Timer counter control register
 12c:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0;
 130:	e1 e8       	ldi	r30, 0x81	; 129
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	10 82       	st	Z, r1
	TCCR1C = 0;
 136:	10 92 82 00 	sts	0x0082, r1
	TCNT1=28673;//Timer Counter
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e7       	ldi	r25, 0x70	; 112
 13e:	90 93 85 00 	sts	0x0085, r25
 142:	80 93 84 00 	sts	0x0084, r24
	ICR1=36863;
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	9f e8       	ldi	r25, 0x8F	; 143
 14a:	90 93 87 00 	sts	0x0087, r25
 14e:	80 93 86 00 	sts	0x0086, r24
	TCCR1B = (1<<CS10);//No prescaling
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	80 83       	st	Z, r24
	TIMSK1 = 0x0F;//Timer Interrupt set
 156:	8f e0       	ldi	r24, 0x0F	; 15
 158:	80 93 6f 00 	sts	0x006F, r24
	sei();// Enable Global Interrupt 
 15c:	78 94       	sei
}
 15e:	08 95       	ret

00000160 <servo1>:
//(0.025/6.7816840277777777777777777777778e-8)-1=36863(i.e  0-36863 is 0-2.5ms)
//Set Timer Counter value =65535-36863=28673
//400HZ/8=50HZ ,so each motor gets 50 cycle/second
void servo1(unsigned char angle)                
{
	servo_value1=36045+(163 * angle);
 160:	48 2f       	mov	r20, r24
 162:	50 e0       	ldi	r21, 0x00	; 0
 164:	23 ea       	ldi	r18, 0xA3	; 163
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	42 9f       	mul	r20, r18
 16a:	c0 01       	movw	r24, r0
 16c:	43 9f       	mul	r20, r19
 16e:	90 0d       	add	r25, r0
 170:	52 9f       	mul	r21, r18
 172:	90 0d       	add	r25, r0
 174:	11 24       	eor	r1, r1
 176:	83 53       	subi	r24, 0x33	; 51
 178:	93 47       	sbci	r25, 0x73	; 115
 17a:	90 93 09 02 	sts	0x0209, r25
 17e:	80 93 08 02 	sts	0x0208, r24
//Required Pulse value=36863/2.5=14745*Required pulse Time(eg. 0.5ms)
//For 0.5ms  14745*0.5=7372.6
//Constant value =(2.5ms-0.5ms) i.e (36863-7372.6)/180=163
//servo_value1=37520+(131 * angle);//for 0.6ms
//servo_value1 = 0xA999 + (81 * angle); //for 1ms
}
 182:	08 95       	ret

00000184 <servo2>:

void servo2(unsigned char angle)                
{
	servo_value2= 36045+(163 * angle);
 184:	48 2f       	mov	r20, r24
 186:	50 e0       	ldi	r21, 0x00	; 0
 188:	23 ea       	ldi	r18, 0xA3	; 163
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	42 9f       	mul	r20, r18
 18e:	c0 01       	movw	r24, r0
 190:	43 9f       	mul	r20, r19
 192:	90 0d       	add	r25, r0
 194:	52 9f       	mul	r21, r18
 196:	90 0d       	add	r25, r0
 198:	11 24       	eor	r1, r1
 19a:	83 53       	subi	r24, 0x33	; 51
 19c:	93 47       	sbci	r25, 0x73	; 115
 19e:	90 93 11 02 	sts	0x0211, r25
 1a2:	80 93 10 02 	sts	0x0210, r24
}
 1a6:	08 95       	ret

000001a8 <servo3>:

void servo3(unsigned char angle)                
{
	servo_value3=36045+(163 * angle);	
 1a8:	48 2f       	mov	r20, r24
 1aa:	50 e0       	ldi	r21, 0x00	; 0
 1ac:	23 ea       	ldi	r18, 0xA3	; 163
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	42 9f       	mul	r20, r18
 1b2:	c0 01       	movw	r24, r0
 1b4:	43 9f       	mul	r20, r19
 1b6:	90 0d       	add	r25, r0
 1b8:	52 9f       	mul	r21, r18
 1ba:	90 0d       	add	r25, r0
 1bc:	11 24       	eor	r1, r1
 1be:	83 53       	subi	r24, 0x33	; 51
 1c0:	93 47       	sbci	r25, 0x73	; 115
 1c2:	90 93 07 02 	sts	0x0207, r25
 1c6:	80 93 06 02 	sts	0x0206, r24
}
 1ca:	08 95       	ret

000001cc <servo4>:

void servo4(unsigned char angle)                
{
	servo_value4=36045+(163 * angle);
 1cc:	48 2f       	mov	r20, r24
 1ce:	50 e0       	ldi	r21, 0x00	; 0
 1d0:	23 ea       	ldi	r18, 0xA3	; 163
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	42 9f       	mul	r20, r18
 1d6:	c0 01       	movw	r24, r0
 1d8:	43 9f       	mul	r20, r19
 1da:	90 0d       	add	r25, r0
 1dc:	52 9f       	mul	r21, r18
 1de:	90 0d       	add	r25, r0
 1e0:	11 24       	eor	r1, r1
 1e2:	83 53       	subi	r24, 0x33	; 51
 1e4:	93 47       	sbci	r25, 0x73	; 115
 1e6:	90 93 0f 02 	sts	0x020F, r25
 1ea:	80 93 0e 02 	sts	0x020E, r24
}
 1ee:	08 95       	ret

000001f0 <servo5>:

void servo5(unsigned char angle)                
{
	servo_value5=36045+(163 * angle);
 1f0:	48 2f       	mov	r20, r24
 1f2:	50 e0       	ldi	r21, 0x00	; 0
 1f4:	23 ea       	ldi	r18, 0xA3	; 163
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	42 9f       	mul	r20, r18
 1fa:	c0 01       	movw	r24, r0
 1fc:	43 9f       	mul	r20, r19
 1fe:	90 0d       	add	r25, r0
 200:	52 9f       	mul	r21, r18
 202:	90 0d       	add	r25, r0
 204:	11 24       	eor	r1, r1
 206:	83 53       	subi	r24, 0x33	; 51
 208:	93 47       	sbci	r25, 0x73	; 115
 20a:	90 93 18 02 	sts	0x0218, r25
 20e:	80 93 17 02 	sts	0x0217, r24
}
 212:	08 95       	ret

00000214 <servo6>:

void servo6(unsigned char angle)              
{
	servo_value6=36045+(163 * angle);
 214:	48 2f       	mov	r20, r24
 216:	50 e0       	ldi	r21, 0x00	; 0
 218:	23 ea       	ldi	r18, 0xA3	; 163
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	42 9f       	mul	r20, r18
 21e:	c0 01       	movw	r24, r0
 220:	43 9f       	mul	r20, r19
 222:	90 0d       	add	r25, r0
 224:	52 9f       	mul	r21, r18
 226:	90 0d       	add	r25, r0
 228:	11 24       	eor	r1, r1
 22a:	83 53       	subi	r24, 0x33	; 51
 22c:	93 47       	sbci	r25, 0x73	; 115
 22e:	90 93 0d 02 	sts	0x020D, r25
 232:	80 93 0c 02 	sts	0x020C, r24
}
 236:	08 95       	ret

00000238 <servo7>:

void servo7(unsigned char angle)
{
	servo_value7=36045+(163 * angle);
 238:	48 2f       	mov	r20, r24
 23a:	50 e0       	ldi	r21, 0x00	; 0
 23c:	23 ea       	ldi	r18, 0xA3	; 163
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	42 9f       	mul	r20, r18
 242:	c0 01       	movw	r24, r0
 244:	43 9f       	mul	r20, r19
 246:	90 0d       	add	r25, r0
 248:	52 9f       	mul	r21, r18
 24a:	90 0d       	add	r25, r0
 24c:	11 24       	eor	r1, r1
 24e:	83 53       	subi	r24, 0x33	; 51
 250:	93 47       	sbci	r25, 0x73	; 115
 252:	90 93 0b 02 	sts	0x020B, r25
 256:	80 93 0a 02 	sts	0x020A, r24
}
 25a:	08 95       	ret

0000025c <__vector_17>:

ISR(TIMER1_COMPA_vect)//Interrupt is called when OCRA Matches Timer Counter
{  
 25c:	1f 92       	push	r1
 25e:	0f 92       	push	r0
 260:	0f b6       	in	r0, 0x3f	; 63
 262:	0f 92       	push	r0
 264:	11 24       	eor	r1, r1
 266:	8f 93       	push	r24
 268:	ef 93       	push	r30
 26a:	ff 93       	push	r31
	 //Reset the servo
	if (set== 0) PORTJ =PORTJ & 0xFD;
 26c:	80 91 05 02 	lds	r24, 0x0205
 270:	88 23       	and	r24, r24
 272:	29 f4       	brne	.+10     	; 0x27e <__vector_17+0x22>
 274:	e5 e0       	ldi	r30, 0x05	; 5
 276:	f1 e0       	ldi	r31, 0x01	; 1
 278:	80 81       	ld	r24, Z
 27a:	8d 7f       	andi	r24, 0xFD	; 253
 27c:	80 83       	st	Z, r24
	if (set== 1)  PORTJ =PORTJ &  0xFB;
 27e:	80 91 05 02 	lds	r24, 0x0205
 282:	81 30       	cpi	r24, 0x01	; 1
 284:	29 f4       	brne	.+10     	; 0x290 <__vector_17+0x34>
 286:	e5 e0       	ldi	r30, 0x05	; 5
 288:	f1 e0       	ldi	r31, 0x01	; 1
 28a:	80 81       	ld	r24, Z
 28c:	8b 7f       	andi	r24, 0xFB	; 251
 28e:	80 83       	st	Z, r24
	if (set== 2)  PORTJ =PORTJ &  0x7F;	
 290:	80 91 05 02 	lds	r24, 0x0205
 294:	82 30       	cpi	r24, 0x02	; 2
 296:	29 f4       	brne	.+10     	; 0x2a2 <__vector_17+0x46>
 298:	e5 e0       	ldi	r30, 0x05	; 5
 29a:	f1 e0       	ldi	r31, 0x01	; 1
 29c:	80 81       	ld	r24, Z
 29e:	8f 77       	andi	r24, 0x7F	; 127
 2a0:	80 83       	st	Z, r24
	
}
 2a2:	ff 91       	pop	r31
 2a4:	ef 91       	pop	r30
 2a6:	8f 91       	pop	r24
 2a8:	0f 90       	pop	r0
 2aa:	0f be       	out	0x3f, r0	; 63
 2ac:	0f 90       	pop	r0
 2ae:	1f 90       	pop	r1
 2b0:	18 95       	reti

000002b2 <__vector_18>:

ISR(TIMER1_COMPB_vect)
{
 2b2:	1f 92       	push	r1
 2b4:	0f 92       	push	r0
 2b6:	0f b6       	in	r0, 0x3f	; 63
 2b8:	0f 92       	push	r0
 2ba:	11 24       	eor	r1, r1
 2bc:	8f 93       	push	r24
 2be:	ef 93       	push	r30
 2c0:	ff 93       	push	r31
	if (set== 0)  PORTJ =PORTJ &  0xF7;
 2c2:	80 91 05 02 	lds	r24, 0x0205
 2c6:	88 23       	and	r24, r24
 2c8:	29 f4       	brne	.+10     	; 0x2d4 <__vector_18+0x22>
 2ca:	e5 e0       	ldi	r30, 0x05	; 5
 2cc:	f1 e0       	ldi	r31, 0x01	; 1
 2ce:	80 81       	ld	r24, Z
 2d0:	87 7f       	andi	r24, 0xF7	; 247
 2d2:	80 83       	st	Z, r24
	if (set== 1)  PORTJ = PORTJ & 0xEF;
 2d4:	80 91 05 02 	lds	r24, 0x0205
 2d8:	81 30       	cpi	r24, 0x01	; 1
 2da:	29 f4       	brne	.+10     	; 0x2e6 <__vector_18+0x34>
 2dc:	e5 e0       	ldi	r30, 0x05	; 5
 2de:	f1 e0       	ldi	r31, 0x01	; 1
 2e0:	80 81       	ld	r24, Z
 2e2:	8f 7e       	andi	r24, 0xEF	; 239
 2e4:	80 83       	st	Z, r24
}
 2e6:	ff 91       	pop	r31
 2e8:	ef 91       	pop	r30
 2ea:	8f 91       	pop	r24
 2ec:	0f 90       	pop	r0
 2ee:	0f be       	out	0x3f, r0	; 63
 2f0:	0f 90       	pop	r0
 2f2:	1f 90       	pop	r1
 2f4:	18 95       	reti

000002f6 <__vector_19>:
ISR(TIMER1_COMPC_vect)
{
 2f6:	1f 92       	push	r1
 2f8:	0f 92       	push	r0
 2fa:	0f b6       	in	r0, 0x3f	; 63
 2fc:	0f 92       	push	r0
 2fe:	11 24       	eor	r1, r1
 300:	8f 93       	push	r24
 302:	ef 93       	push	r30
 304:	ff 93       	push	r31
	if (set== 0) PORTJ =PORTJ &  0xDF;
 306:	80 91 05 02 	lds	r24, 0x0205
 30a:	88 23       	and	r24, r24
 30c:	29 f4       	brne	.+10     	; 0x318 <__vector_19+0x22>
 30e:	e5 e0       	ldi	r30, 0x05	; 5
 310:	f1 e0       	ldi	r31, 0x01	; 1
 312:	80 81       	ld	r24, Z
 314:	8f 7d       	andi	r24, 0xDF	; 223
 316:	80 83       	st	Z, r24
	if (set== 1) PORTJ =PORTJ &  0xBF;
 318:	80 91 05 02 	lds	r24, 0x0205
 31c:	81 30       	cpi	r24, 0x01	; 1
 31e:	29 f4       	brne	.+10     	; 0x32a <__vector_19+0x34>
 320:	e5 e0       	ldi	r30, 0x05	; 5
 322:	f1 e0       	ldi	r31, 0x01	; 1
 324:	80 81       	ld	r24, Z
 326:	8f 7b       	andi	r24, 0xBF	; 191
 328:	80 83       	st	Z, r24
}
 32a:	ff 91       	pop	r31
 32c:	ef 91       	pop	r30
 32e:	8f 91       	pop	r24
 330:	0f 90       	pop	r0
 332:	0f be       	out	0x3f, r0	; 63
 334:	0f 90       	pop	r0
 336:	1f 90       	pop	r1
 338:	18 95       	reti

0000033a <__vector_20>:
ISR(TIMER1_OVF_vect)//Timer overflow interrupt
{
 33a:	1f 92       	push	r1
 33c:	0f 92       	push	r0
 33e:	0f b6       	in	r0, 0x3f	; 63
 340:	0f 92       	push	r0
 342:	11 24       	eor	r1, r1
 344:	8f 93       	push	r24
 346:	9f 93       	push	r25
 348:	ef 93       	push	r30
 34a:	ff 93       	push	r31
	TCNT1=28673;//Reload Timer value
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e7       	ldi	r25, 0x70	; 112
 350:	90 93 85 00 	sts	0x0085, r25
 354:	80 93 84 00 	sts	0x0084, r24
	set++;
 358:	80 91 05 02 	lds	r24, 0x0205
 35c:	8f 5f       	subi	r24, 0xFF	; 255
 35e:	80 93 05 02 	sts	0x0205, r24
	if (set>7)
 362:	88 30       	cpi	r24, 0x08	; 8
 364:	18 f0       	brcs	.+6      	; 0x36c <__vector_20+0x32>
	{
		set = 0;
 366:	10 92 05 02 	sts	0x0205, r1
 36a:	02 c0       	rjmp	.+4      	; 0x370 <__vector_20+0x36>
	}

	if (set== 0)
 36c:	88 23       	and	r24, r24
 36e:	19 f5       	brne	.+70     	; 0x3b6 <__vector_20+0x7c>
	{
		//Set pin High of servo
		PORTJ =PORTJ | 0x02;
 370:	e5 e0       	ldi	r30, 0x05	; 5
 372:	f1 e0       	ldi	r31, 0x01	; 1
 374:	80 81       	ld	r24, Z
 376:	82 60       	ori	r24, 0x02	; 2
 378:	80 83       	st	Z, r24
		PORTJ =PORTJ | 0x08;
 37a:	80 81       	ld	r24, Z
 37c:	88 60       	ori	r24, 0x08	; 8
 37e:	80 83       	st	Z, r24
		PORTJ =PORTJ | 0x20;
 380:	80 81       	ld	r24, Z
 382:	80 62       	ori	r24, 0x20	; 32
 384:	80 83       	st	Z, r24
		//Output compare Register 
		OCR1A=servo_value1;
 386:	80 91 08 02 	lds	r24, 0x0208
 38a:	90 91 09 02 	lds	r25, 0x0209
 38e:	90 93 89 00 	sts	0x0089, r25
 392:	80 93 88 00 	sts	0x0088, r24
		OCR1B=servo_value3;
 396:	80 91 06 02 	lds	r24, 0x0206
 39a:	90 91 07 02 	lds	r25, 0x0207
 39e:	90 93 8b 00 	sts	0x008B, r25
 3a2:	80 93 8a 00 	sts	0x008A, r24
		OCR1C=servo_value5;
 3a6:	80 91 17 02 	lds	r24, 0x0217
 3aa:	90 91 18 02 	lds	r25, 0x0218
 3ae:	90 93 8d 00 	sts	0x008D, r25
 3b2:	80 93 8c 00 	sts	0x008C, r24
	}
	
	if (set== 1)
 3b6:	80 91 05 02 	lds	r24, 0x0205
 3ba:	81 30       	cpi	r24, 0x01	; 1
 3bc:	19 f5       	brne	.+70     	; 0x404 <__vector_20+0xca>
	{
		PORTJ =PORTJ | 0x04;
 3be:	e5 e0       	ldi	r30, 0x05	; 5
 3c0:	f1 e0       	ldi	r31, 0x01	; 1
 3c2:	80 81       	ld	r24, Z
 3c4:	84 60       	ori	r24, 0x04	; 4
 3c6:	80 83       	st	Z, r24
		PORTJ =PORTJ | 0x10;
 3c8:	80 81       	ld	r24, Z
 3ca:	80 61       	ori	r24, 0x10	; 16
 3cc:	80 83       	st	Z, r24
		PORTJ =PORTJ | 0x40;
 3ce:	80 81       	ld	r24, Z
 3d0:	80 64       	ori	r24, 0x40	; 64
 3d2:	80 83       	st	Z, r24
		
		OCR1A=servo_value2;
 3d4:	80 91 10 02 	lds	r24, 0x0210
 3d8:	90 91 11 02 	lds	r25, 0x0211
 3dc:	90 93 89 00 	sts	0x0089, r25
 3e0:	80 93 88 00 	sts	0x0088, r24
		OCR1B=servo_value4;
 3e4:	80 91 0e 02 	lds	r24, 0x020E
 3e8:	90 91 0f 02 	lds	r25, 0x020F
 3ec:	90 93 8b 00 	sts	0x008B, r25
 3f0:	80 93 8a 00 	sts	0x008A, r24
		OCR1C=servo_value6;
 3f4:	80 91 0c 02 	lds	r24, 0x020C
 3f8:	90 91 0d 02 	lds	r25, 0x020D
 3fc:	90 93 8d 00 	sts	0x008D, r25
 400:	80 93 8c 00 	sts	0x008C, r24
	}

	if (set== 2)
 404:	80 91 05 02 	lds	r24, 0x0205
 408:	82 30       	cpi	r24, 0x02	; 2
 40a:	69 f4       	brne	.+26     	; 0x426 <__vector_20+0xec>
	{
		PORTJ =PORTJ | 0x80;
 40c:	e5 e0       	ldi	r30, 0x05	; 5
 40e:	f1 e0       	ldi	r31, 0x01	; 1
 410:	80 81       	ld	r24, Z
 412:	80 68       	ori	r24, 0x80	; 128
 414:	80 83       	st	Z, r24
		OCR1A=servo_value7;
 416:	80 91 0a 02 	lds	r24, 0x020A
 41a:	90 91 0b 02 	lds	r25, 0x020B
 41e:	90 93 89 00 	sts	0x0089, r25
 422:	80 93 88 00 	sts	0x0088, r24

	}
	
}
 426:	ff 91       	pop	r31
 428:	ef 91       	pop	r30
 42a:	9f 91       	pop	r25
 42c:	8f 91       	pop	r24
 42e:	0f 90       	pop	r0
 430:	0f be       	out	0x3f, r0	; 63
 432:	0f 90       	pop	r0
 434:	1f 90       	pop	r1
 436:	18 95       	reti

00000438 <usb_sendchar>:
}


unsigned int usb_sendchar(unsigned char data)
{
	UDR0=data;//USART data register
 438:	80 93 c6 00 	sts	0x00C6, r24
	while ((UCSR0A & (1 << TXC0)) == 0);//Wait till the buffer is empty
 43c:	e0 ec       	ldi	r30, 0xC0	; 192
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	80 81       	ld	r24, Z
 442:	86 ff       	sbrs	r24, 6
 444:	fd cf       	rjmp	.-6      	; 0x440 <usb_sendchar+0x8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 446:	8f ef       	ldi	r24, 0xFF	; 255
 448:	9f e8       	ldi	r25, 0x8F	; 143
 44a:	01 97       	sbiw	r24, 0x01	; 1
 44c:	f1 f7       	brne	.-4      	; 0x44a <usb_sendchar+0x12>
 44e:	00 c0       	rjmp	.+0      	; 0x450 <usb_sendchar+0x18>
 450:	00 00       	nop
	_delay_ms(10);		
}
 452:	08 95       	ret

00000454 <usb_sendstring>:

void usb_sendstring(char * st)//Send String to PC
{
 454:	cf 93       	push	r28
 456:	df 93       	push	r29
 458:	ec 01       	movw	r28, r24
	while(*st)
 45a:	88 81       	ld	r24, Y
 45c:	88 23       	and	r24, r24
 45e:	31 f0       	breq	.+12     	; 0x46c <usb_sendstring+0x18>
	UDR0=data;//USART data register
	while ((UCSR0A & (1 << TXC0)) == 0);//Wait till the buffer is empty
	_delay_ms(10);		
}

void usb_sendstring(char * st)//Send String to PC
 460:	21 96       	adiw	r28, 0x01	; 1
{
	while(*st)
	{
		usb_sendchar(*st++);
 462:	0e 94 1c 02 	call	0x438	; 0x438 <usb_sendchar>
	_delay_ms(10);		
}

void usb_sendstring(char * st)//Send String to PC
{
	while(*st)
 466:	89 91       	ld	r24, Y+
 468:	88 23       	and	r24, r24
 46a:	d9 f7       	brne	.-10     	; 0x462 <usb_sendstring+0xe>
	{
		usb_sendchar(*st++);
	}
}
 46c:	df 91       	pop	r29
 46e:	cf 91       	pop	r28
 470:	08 95       	ret

00000472 <__vector_25>:
 ISR (USART0_RX_vect)//USART Reciever Interrupt(Recieve from PC)
 {
 472:	1f 92       	push	r1
 474:	0f 92       	push	r0
 476:	0f b6       	in	r0, 0x3f	; 63
 478:	0f 92       	push	r0
 47a:	11 24       	eor	r1, r1
 47c:	2f 93       	push	r18
 47e:	3f 93       	push	r19
 480:	4f 93       	push	r20
 482:	5f 93       	push	r21
 484:	6f 93       	push	r22
 486:	7f 93       	push	r23
 488:	8f 93       	push	r24
 48a:	9f 93       	push	r25
 48c:	af 93       	push	r26
 48e:	bf 93       	push	r27
 490:	cf 93       	push	r28
 492:	df 93       	push	r29
 494:	ef 93       	push	r30
 496:	ff 93       	push	r31
	 
	 buffer[count++]=UDR0;//Recieve data in buffer
 498:	80 91 01 02 	lds	r24, 0x0201
 49c:	90 91 c6 00 	lds	r25, 0x00C6
 4a0:	e2 e0       	ldi	r30, 0x02	; 2
 4a2:	f2 e0       	ldi	r31, 0x02	; 2
 4a4:	e8 0f       	add	r30, r24
 4a6:	f1 1d       	adc	r31, r1
 4a8:	90 83       	st	Z, r25
 4aa:	8f 5f       	subi	r24, 0xFF	; 255
 4ac:	80 93 01 02 	sts	0x0201, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4b0:	95 e0       	ldi	r25, 0x05	; 5
 4b2:	9a 95       	dec	r25
 4b4:	f1 f7       	brne	.-4      	; 0x4b2 <__vector_25+0x40>
	 _delay_us(1);//Delay for next data to be recieved
	 
	  if(count==buffer_size)//Condition for buffer overflow
 4b6:	83 30       	cpi	r24, 0x03	; 3
 4b8:	09 f0       	breq	.+2      	; 0x4bc <__vector_25+0x4a>
 4ba:	48 c0       	rjmp	.+144    	; 0x54c <__vector_25+0xda>
		 {
			 count=0;//Reset buffer
 4bc:	10 92 01 02 	sts	0x0201, r1
			 setValue++;
 4c0:	80 91 00 02 	lds	r24, 0x0200
 4c4:	8f 5f       	subi	r24, 0xFF	; 255
 4c6:	80 93 00 02 	sts	0x0200, r24
			 switch(setValue)//sends data to servo motor
 4ca:	83 30       	cpi	r24, 0x03	; 3
 4cc:	e1 f0       	breq	.+56     	; 0x506 <__vector_25+0x94>
 4ce:	84 30       	cpi	r24, 0x04	; 4
 4d0:	28 f4       	brcc	.+10     	; 0x4dc <__vector_25+0x6a>
 4d2:	81 30       	cpi	r24, 0x01	; 1
 4d4:	51 f0       	breq	.+20     	; 0x4ea <__vector_25+0x78>
 4d6:	82 30       	cpi	r24, 0x02	; 2
 4d8:	c9 f5       	brne	.+114    	; 0x54c <__vector_25+0xda>
 4da:	0e c0       	rjmp	.+28     	; 0x4f8 <__vector_25+0x86>
 4dc:	85 30       	cpi	r24, 0x05	; 5
 4de:	39 f1       	breq	.+78     	; 0x52e <__vector_25+0xbc>
 4e0:	85 30       	cpi	r24, 0x05	; 5
 4e2:	c0 f0       	brcs	.+48     	; 0x514 <__vector_25+0xa2>
 4e4:	86 30       	cpi	r24, 0x06	; 6
 4e6:	91 f5       	brne	.+100    	; 0x54c <__vector_25+0xda>
 4e8:	29 c0       	rjmp	.+82     	; 0x53c <__vector_25+0xca>
			 {
				 case 1:
				 servo1(atoi(buffer));
 4ea:	82 e0       	ldi	r24, 0x02	; 2
 4ec:	92 e0       	ldi	r25, 0x02	; 2
 4ee:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <atoi>
 4f2:	0e 94 b0 00 	call	0x160	; 0x160 <servo1>
				 break;
 4f6:	2a c0       	rjmp	.+84     	; 0x54c <__vector_25+0xda>
				 case 2:
				 servo2(atoi(buffer));
 4f8:	82 e0       	ldi	r24, 0x02	; 2
 4fa:	92 e0       	ldi	r25, 0x02	; 2
 4fc:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <atoi>
 500:	0e 94 c2 00 	call	0x184	; 0x184 <servo2>
				 break;
 504:	23 c0       	rjmp	.+70     	; 0x54c <__vector_25+0xda>
				 case 3:
				 servo3(atoi(buffer));
 506:	82 e0       	ldi	r24, 0x02	; 2
 508:	92 e0       	ldi	r25, 0x02	; 2
 50a:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <atoi>
 50e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <servo3>
				 break;
 512:	1c c0       	rjmp	.+56     	; 0x54c <__vector_25+0xda>
				 case 4:
				 servo4(atoi(buffer));
 514:	c2 e0       	ldi	r28, 0x02	; 2
 516:	d2 e0       	ldi	r29, 0x02	; 2
 518:	ce 01       	movw	r24, r28
 51a:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <atoi>
 51e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <servo4>
				 servo5(atoi(buffer));
 522:	ce 01       	movw	r24, r28
 524:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <atoi>
 528:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <servo5>
				 break;
 52c:	0f c0       	rjmp	.+30     	; 0x54c <__vector_25+0xda>
				 case 5:
				 servo6(atoi(buffer));
 52e:	82 e0       	ldi	r24, 0x02	; 2
 530:	92 e0       	ldi	r25, 0x02	; 2
 532:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <atoi>
 536:	0e 94 0a 01 	call	0x214	; 0x214 <servo6>
				 break;
 53a:	08 c0       	rjmp	.+16     	; 0x54c <__vector_25+0xda>
				 case 6:
				 servo7(atoi(buffer));
 53c:	82 e0       	ldi	r24, 0x02	; 2
 53e:	92 e0       	ldi	r25, 0x02	; 2
 540:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <atoi>
 544:	0e 94 1c 01 	call	0x238	; 0x238 <servo7>
				 setValue=0;
 548:	10 92 00 02 	sts	0x0200, r1
			 }
			
		 
		 }
	 
 }
 54c:	ff 91       	pop	r31
 54e:	ef 91       	pop	r30
 550:	df 91       	pop	r29
 552:	cf 91       	pop	r28
 554:	bf 91       	pop	r27
 556:	af 91       	pop	r26
 558:	9f 91       	pop	r25
 55a:	8f 91       	pop	r24
 55c:	7f 91       	pop	r23
 55e:	6f 91       	pop	r22
 560:	5f 91       	pop	r21
 562:	4f 91       	pop	r20
 564:	3f 91       	pop	r19
 566:	2f 91       	pop	r18
 568:	0f 90       	pop	r0
 56a:	0f be       	out	0x3f, r0	; 63
 56c:	0f 90       	pop	r0
 56e:	1f 90       	pop	r1
 570:	18 95       	reti

00000572 <main>:
 unsigned char count=0;
 unsigned char setValue=0;
inline void usb_init()
{
	//USART Control and Status Register
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0)| (1<<RXCIE0);   // It enables transmitter/reciever and Interrupt
 572:	e1 ec       	ldi	r30, 0xC1	; 193
 574:	f0 e0       	ldi	r31, 0x00	; 0
 576:	80 81       	ld	r24, Z
 578:	88 69       	ori	r24, 0x98	; 152
 57a:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01);   //Selects  the data block size of  8bit
 57c:	e2 ec       	ldi	r30, 0xC2	; 194
 57e:	f0 e0       	ldi	r31, 0x00	; 0
 580:	80 81       	ld	r24, Z
 582:	86 60       	ori	r24, 0x06	; 6
 584:	80 83       	st	Z, r24
	//USART Baud Rate Calculation=(f_cpu/(16*baudrate_required))-1 i.e 115200
	UBRR0L = 0x07;
 586:	87 e0       	ldi	r24, 0x07	; 7
 588:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = 0x00;
 58c:	10 92 c5 00 	sts	0x00C5, r1
	sei();//Enable Interrupt
 590:	78 94       	sei
unsigned char c[5];

int main(void)
{
	usb_init();	
 	servo_init();
 592:	0e 94 91 00 	call	0x122	; 0x122 <servo_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 596:	8f ef       	ldi	r24, 0xFF	; 255
 598:	9f ef       	ldi	r25, 0xFF	; 255
 59a:	a6 e8       	ldi	r26, 0x86	; 134
 59c:	81 50       	subi	r24, 0x01	; 1
 59e:	90 40       	sbci	r25, 0x00	; 0
 5a0:	a0 40       	sbci	r26, 0x00	; 0
 5a2:	e1 f7       	brne	.-8      	; 0x59c <main+0x2a>
 5a4:	00 c0       	rjmp	.+0      	; 0x5a6 <main+0x34>
 5a6:	00 00       	nop
	  _delay_ms(3000);
	  servo1(90);
 5a8:	8a e5       	ldi	r24, 0x5A	; 90
 5aa:	0e 94 b0 00 	call	0x160	; 0x160 <servo1>
	  servo2(90);
 5ae:	8a e5       	ldi	r24, 0x5A	; 90
 5b0:	0e 94 c2 00 	call	0x184	; 0x184 <servo2>
	  servo3(90);
 5b4:	8a e5       	ldi	r24, 0x5A	; 90
 5b6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <servo3>
	  servo4(90);
 5ba:	8a e5       	ldi	r24, 0x5A	; 90
 5bc:	0e 94 e6 00 	call	0x1cc	; 0x1cc <servo4>
	  servo5(90);
 5c0:	8a e5       	ldi	r24, 0x5A	; 90
 5c2:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <servo5>
	  servo6(90);
 5c6:	8a e5       	ldi	r24, 0x5A	; 90
 5c8:	0e 94 0a 01 	call	0x214	; 0x214 <servo6>
	  servo7(90);
 5cc:	8a e5       	ldi	r24, 0x5A	; 90
 5ce:	0e 94 1c 01 	call	0x238	; 0x238 <servo7>
 5d2:	ff cf       	rjmp	.-2      	; 0x5d2 <main+0x60>

000005d4 <atoi>:
 5d4:	fc 01       	movw	r30, r24
 5d6:	88 27       	eor	r24, r24
 5d8:	99 27       	eor	r25, r25
 5da:	e8 94       	clt
 5dc:	21 91       	ld	r18, Z+
 5de:	20 32       	cpi	r18, 0x20	; 32
 5e0:	e9 f3       	breq	.-6      	; 0x5dc <atoi+0x8>
 5e2:	29 30       	cpi	r18, 0x09	; 9
 5e4:	10 f0       	brcs	.+4      	; 0x5ea <atoi+0x16>
 5e6:	2e 30       	cpi	r18, 0x0E	; 14
 5e8:	c8 f3       	brcs	.-14     	; 0x5dc <atoi+0x8>
 5ea:	2b 32       	cpi	r18, 0x2B	; 43
 5ec:	41 f0       	breq	.+16     	; 0x5fe <atoi+0x2a>
 5ee:	2d 32       	cpi	r18, 0x2D	; 45
 5f0:	39 f4       	brne	.+14     	; 0x600 <atoi+0x2c>
 5f2:	68 94       	set
 5f4:	04 c0       	rjmp	.+8      	; 0x5fe <atoi+0x2a>
 5f6:	0e 94 08 03 	call	0x610	; 0x610 <__mulhi_const_10>
 5fa:	82 0f       	add	r24, r18
 5fc:	91 1d       	adc	r25, r1
 5fe:	21 91       	ld	r18, Z+
 600:	20 53       	subi	r18, 0x30	; 48
 602:	2a 30       	cpi	r18, 0x0A	; 10
 604:	c0 f3       	brcs	.-16     	; 0x5f6 <atoi+0x22>
 606:	1e f4       	brtc	.+6      	; 0x60e <atoi+0x3a>
 608:	90 95       	com	r25
 60a:	81 95       	neg	r24
 60c:	9f 4f       	sbci	r25, 0xFF	; 255
 60e:	08 95       	ret

00000610 <__mulhi_const_10>:
 610:	7a e0       	ldi	r23, 0x0A	; 10
 612:	97 9f       	mul	r25, r23
 614:	90 2d       	mov	r25, r0
 616:	87 9f       	mul	r24, r23
 618:	80 2d       	mov	r24, r0
 61a:	91 0d       	add	r25, r1
 61c:	11 24       	eor	r1, r1
 61e:	08 95       	ret

00000620 <_exit>:
 620:	f8 94       	cli

00000622 <__stop_program>:
 622:	ff cf       	rjmp	.-2      	; 0x622 <__stop_program>
